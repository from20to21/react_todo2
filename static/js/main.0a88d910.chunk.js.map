{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoSelect.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoSelectContext","TodoProvider","useReducer","dispatch","nextId","useRef","useState","mode","setMode","Provider","value","useTodoState","useContext","useTodoDispatch","useTodoSelect","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","TodoSelectBlock","TodoSelect","selectBox","ref","onClick","e","preventDefault","i","current","classList","remove","target","add","Remove","TodoItemBlock","CheckCircle","props","css","Text","React","memo","customMedia","generateMedia","lgDesktop","mdDesktop","tablet","smTablet","mobile","TodoListBlock","lessThan","TodoList","todos","key","InsertFormPositioner","form","Input","input","setValue","onSubmit","autoFocus","placeholder","onChange","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a88d910.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n  width: 80%;\r\n  min-width: 512px;\r\n  height: 90vh;\r\n  min-height: 638px;\r\n\r\n  margin: 0 auto; /* 페이지 중앙에 나타나도록 설정 */\r\n\r\n  margin-bottom: 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nfunction TodoTemplate({ children }) {\r\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\r\n}\r\n\r\nexport default TodoTemplate;\r\n","import React, {\r\n  useReducer,\r\n  createContext,\r\n  useContext,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\n\r\nconst initialTodos = [\r\n  {\r\n    id: 1,\r\n    text: '프로젝트 생성하기',\r\n    done: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    text: '컴포넌트 스타일링하기',\r\n    done: true,\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'Context 만들기',\r\n    done: false,\r\n  },\r\n  {\r\n    id: 4,\r\n    text: '기능 구현하기',\r\n    done: false,\r\n  },\r\n];\r\n\r\nfunction todoReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CREATE':\r\n      return state.concat(action.todo);\r\n    case 'TOGGLE':\r\n      return state.map((todo) =>\r\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo,\r\n      );\r\n    case 'REMOVE':\r\n      return state.filter((todo) => todo.id !== action.id);\r\n    default:\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n  }\r\n}\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\nconst TodoSelectContext = createContext();\r\n\r\nexport function TodoProvider({ children }) {\r\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n  const nextId = useRef(5);\r\n  const [mode, setMode] = useState('ALL');\r\n\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        <TodoNextIdContext.Provider value={nextId}>\r\n          <TodoSelectContext.Provider value={[mode, setMode]}>\r\n            {children}\r\n          </TodoSelectContext.Provider>\r\n        </TodoNextIdContext.Provider>\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTodoState() {\r\n  return useContext(TodoStateContext);\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n  return useContext(TodoDispatchContext);\r\n}\r\n\r\nexport function useTodoNextId() {\r\n  return useContext(TodoNextIdContext);\r\n}\r\n\r\nexport function useTodoSelect() {\r\n  return useContext(TodoSelectContext);\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  h1 {\r\n    font-size: 3.5rem;\r\n    color: #20c997;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n    font-weight: 100;\r\n  }\r\n  .day {\r\n    color: #20c997;\r\n    font-size: 1rem;\r\n    font-weight: 400;\r\n    margin-top: -40px;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n  }\r\n  .tasks-left {\r\n    color: #20c997;\r\n    font-size: 1.2rem;\r\n    font-weight: 400;\r\n    margin-top: 10px;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n  }\r\n`;\r\n\r\nfunction TodoHead() {\r\n  const todos = useTodoState();\r\n  const undoneTasks = todos.filter((todo) => !todo.done);\r\n\r\n  const today = new Date();\r\n  const dateString = today.toLocaleDateString('ko-KR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  });\r\n  const dayName = today.toLocaleDateString('ko-KR', { weekday: 'long' });\r\n\r\n  return (\r\n    <TodoHeadBlock>\r\n      <h1>Todo</h1>\r\n      <div className=\"day\">\r\n        {dateString} {dayName}\r\n      </div>\r\n      <div className=\"tasks-left\">\r\n        \" 할 일이 {undoneTasks.length} 개 남았습니다. \"\r\n      </div>\r\n    </TodoHeadBlock>\r\n  );\r\n}\r\n\r\nexport default TodoHead;\r\n","import React, { useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoSelect } from '../TodoContext';\r\n\r\nconst TodoSelectBlock = styled.div`\r\n  width: 60%;\r\n  margin: 15px auto; /* 페이지 중앙에 나타나도록 설정 */\r\n  display: flex;\r\n  align-items: center;\r\n  padding-left: 10px;\r\n  span {\r\n    padding: 1px 7px;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    margin-right: 10px;\r\n    color: white;\r\n    cursor: pointer;\r\n    letter-spacing: 0.02rem;\r\n  }\r\n  span.select {\r\n    background: #20c997;\r\n    border-radius: 5px;\r\n    color: #333333;\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nfunction TodoSelect() {\r\n  const selectBox = useRef(null);\r\n\r\n  const [mode, setMode] = useTodoSelect();\r\n\r\n  const selectALL = (e) => {\r\n    setMode('ALL');\r\n    e.preventDefault();\r\n    for (var i = 0; i < selectBox.current.children.length; i++) {\r\n      selectBox.current.children[i].classList.remove('select');\r\n    }\r\n    e.target.classList.add('select');\r\n  };\r\n  const selectTODO = (e) => {\r\n    setMode('TODO');\r\n    e.preventDefault();\r\n    for (var i = 0; i < selectBox.current.children.length; i++) {\r\n      selectBox.current.children[i].classList.remove('select');\r\n    }\r\n    e.target.classList.add('select');\r\n  };\r\n  const selectDONE = (e) => {\r\n    setMode('DONE');\r\n    e.preventDefault();\r\n    for (var i = 0; i < selectBox.current.children.length; i++) {\r\n      selectBox.current.children[i].classList.remove('select');\r\n    }\r\n    e.target.classList.add('select');\r\n  };\r\n\r\n  return (\r\n    <TodoSelectBlock ref={selectBox}>\r\n      <span className=\"select\" onClick={selectALL}>\r\n        전체목록\r\n      </span>\r\n      <span onClick={selectTODO}>남은목록</span>\r\n      <span onClick={selectDONE}>완료목록</span>\r\n    </TodoSelectBlock>\r\n  );\r\n}\r\n\r\nexport default TodoSelect;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport { BsFillSquareFill } from 'react-icons/bs';\r\nimport { useTodoDispatch } from '../TodoContext';\r\n\r\nconst Remove = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 20px;\r\n  color: #212529;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: #ff6b6b;\r\n  }\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n  width: 100%;\r\n  background: none;\r\n  margin: 0 auto 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n`;\r\n\r\nconst CheckCircle = styled.div`\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 3px;\r\n  border: 1px solid #212529;\r\n  font-size: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-left: 10px;\r\n  margin-right: 15px;\r\n  cursor: pointer;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #20c997;\r\n      color: #20c997;\r\n    `}\r\n`;\r\n\r\nconst Text = styled.div`\r\n  flex: 1;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  color: #212529;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #adb5bd;\r\n    `}\r\n`;\r\n\r\nfunction TodoItem({ id, done, text }) {\r\n  const dispatch = useTodoDispatch();\r\n  const onToggle = () => dispatch({ type: 'TOGGLE', id });\r\n  const onRemove = () => dispatch({ type: 'REMOVE', id });\r\n\r\n  return (\r\n    <TodoItemBlock>\r\n      <CheckCircle done={done} onClick={onToggle}>\r\n        {done && <BsFillSquareFill />}\r\n      </CheckCircle>\r\n      <Text done={done}>{text}</Text>\r\n      <Remove onClick={onRemove}>\r\n        <MdDelete />\r\n      </Remove>\r\n    </TodoItemBlock>\r\n  );\r\n}\r\n\r\nexport default React.memo(TodoItem);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\nimport { useTodoState } from '../TodoContext';\r\nimport { useTodoSelect } from '../TodoContext';\r\nimport { generateMedia } from 'styled-media-query';\r\n\r\nconst customMedia = generateMedia({\r\n  lgDesktop: '1350px',\r\n  mdDesktop: '1150px',\r\n  tablet: '960px',\r\n  smTablet: '740px',\r\n  mobile: '600px',\r\n});\r\n\r\nconst TodoListBlock = styled.div`\r\n  width: 60%;\r\n  margin: 0 auto;\r\n  background: white;\r\n  border-radius: 5px;\r\n  overflow-y: auto;\r\n  ${customMedia.lessThan('tablet')`\r\n   width: 95%;\r\n  `}\r\n`;\r\n\r\nfunction TodoList() {\r\n  const todos = useTodoState();\r\n  const [mode, setMode] = useTodoSelect();\r\n  switch (mode) {\r\n    case 'ALL':\r\n      return (\r\n        <TodoListBlock>\r\n          {todos.map((todo) => (\r\n            <TodoItem\r\n              key={todo.id}\r\n              id={todo.id}\r\n              text={todo.text}\r\n              done={todo.done}\r\n            />\r\n          ))}\r\n        </TodoListBlock>\r\n      );\r\n    case 'TODO':\r\n      return (\r\n        <TodoListBlock>\r\n          {todos.map((todo) => {\r\n            if (todo.done === false) {\r\n              return (\r\n                <TodoItem\r\n                  key={todo.id}\r\n                  id={todo.id}\r\n                  text={todo.text}\r\n                  done={todo.done}\r\n                />\r\n              );\r\n            }\r\n          })}\r\n        </TodoListBlock>\r\n      );\r\n    case 'DONE':\r\n      return (\r\n        <TodoListBlock>\r\n          {todos.map((todo) => {\r\n            if (todo.done === true) {\r\n              return (\r\n                <TodoItem\r\n                  key={todo.id}\r\n                  id={todo.id}\r\n                  text={todo.text}\r\n                  done={todo.done}\r\n                />\r\n              );\r\n            }\r\n          })}\r\n        </TodoListBlock>\r\n      );\r\n    default:\r\n      throw new Error(`Unhandled mode: ${mode}`);\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\r\nimport { generateMedia } from 'styled-media-query';\r\n\r\nconst customMedia = generateMedia({\r\n  lgDesktop: '1350px',\r\n  mdDesktop: '1150px',\r\n  tablet: '960px',\r\n  smTablet: '740px',\r\n  mobile: '600px',\r\n});\r\n\r\nconst InsertFormPositioner = styled.form`\r\n  width: 60%;\r\n  margin: 0 auto;\r\n  ${customMedia.lessThan('tablet')`\r\n   width: 95%;\r\n  `}\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n  outline: none;\r\n  font-size: 1rem;\r\n  box-sizing: border-box;\r\n  border: 1px solid white;\r\n  border-radius: 5px;\r\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\r\n`;\r\n\r\nfunction TodoCreate() {\r\n  const [value, setValue] = useState('');\r\n\r\n  const dispatch = useTodoDispatch();\r\n  const nextId = useTodoNextId();\r\n\r\n  const onChange = (e) => setValue(e.target.value);\r\n  const onSubmit = (e) => {\r\n    e.preventDefault(); // 새로고침 방지\r\n    dispatch({\r\n      type: 'CREATE',\r\n      todo: {\r\n        id: nextId.current,\r\n        text: value,\r\n        done: false,\r\n      },\r\n    });\r\n    setValue('');\r\n    nextId.current += 1;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InsertFormPositioner onSubmit={onSubmit}>\r\n        <Input\r\n          autoFocus\r\n          placeholder=\"할 일을 입력 후, Enter 를 누르세요\"\r\n          onChange={onChange}\r\n          value={value}\r\n        />\r\n      </InsertFormPositioner>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(TodoCreate);\r\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoSelect from './components/TodoSelect';\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\nimport { TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #333333;\n  }\n`;\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoCreate />\n        <TodoSelect />\n        <TodoList />\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}